/* Generated by Opal 0.5.0 */
(function($opal) {
  var $a, $b, TMP_1, $c, TMP_2, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, c = nil, rects = nil;
  $opal.add_stubs(['$new', '$width=', '$height=', '$width', '$height', '$rand', '$erase', '$move', '$draw', '$+', '$*', '$wrap', '$fillStyle=', '$fillRect', '$<', '$-', '$%', '$times', '$push', '$each', '$update']);
  ;
  ;
  c = $scope.Canvas.$new("canvas");
  $opal.cdecl($scope, 'CWIDTH', c['$width='](620));
  $opal.cdecl($scope, 'CHEIGHT', c['$height='](400));
  (function($base, $super) {
    function Rect(){};
    var self = Rect = $klass($base, $super, 'Rect', Rect);

    var def = Rect._proto, $scope = Rect._scope;
    def.c = def.x = def.speed = def.dir = def.y = def.w = def.h = def.color = def.cwidth = def.cheight = nil;
    def.$initialize = function(c, color, x, y, w, h) {
      var self = this;
      self.c = c;
      self.color = color;
      self.cwidth = self.c.$width();
      self.cheight = self.c.$height();
      self.x = x;
      self.y = y;
      self.w = w;
      self.h = h;
      self.speed = 2;
      return self.dir = self.$rand(90);
    };

    def.$update = function() {
      var self = this;
      self.$erase();
      self.$move();
      return self.$draw();
    };

    def.$move = function() {
      var self = this;
      self.x = self.x['$+'](self.speed['$*'](Math.cos(self.dir)));
      self.y = self.y['$+'](self.speed['$*'](Math.sin(self.dir)));
      return self.$wrap();
    };

    def.$erase = function() {
      var self = this;
      self.c['$fillStyle=']("black");
      return self.c.$fillRect(self.x, self.y, self.w, self.h);
    };

    def.$draw = function() {
      var self = this;
      self.c['$fillStyle='](self.color);
      return self.c.$fillRect(self.x, self.y, self.w, self.h);
    };

    return (def.$wrap = function() {
      var $a, self = this;
      if (($a = (self.x['$+'](self.w)['$<'](0))) !== false && $a !== nil) {
        self.x = self.cwidth['$-'](self.w)};
      self.x = self.x['$%'](self.cwidth);
      if (($a = (self.y['$+'](self.h)['$<'](0))) !== false && $a !== nil) {
        self.y = self.cheight['$-'](self.h)};
      return self.y = self.y['$%'](self.cheight);
    }, nil);
  })(self, null);
  rects = [];
  ($a = ($b = (20)).$times, $a._p = (TMP_1 = function(i) {var self = TMP_1._s || this;if (i == null) i = nil;
    return rects.$push($scope.Rect.$new(c, "rgba(" + (self.$rand(256)) + ", " + (self.$rand(256)) + ", " + (self.$rand(256)) + ", 1)", (80)['$*'](i), (60)['$*'](i), 20, 20))}, TMP_1._s = self, TMP_1), $a).call($b);
  c['$fillStyle=']("black");
  c.$fillRect(0, 0, $scope.CWIDTH, $scope.CHEIGHT);
  return ($a = ($c = $scope.RenderingLoop).$new, $a._p = (TMP_2 = function() {var self = TMP_2._s || this, $a, $b, TMP_3;
    return ($a = ($b = rects).$each, $a._p = (TMP_3 = function(rect) {var self = TMP_3._s || this;if (rect == null) rect = nil;
      return rect.$update()}, TMP_3._s = self, TMP_3), $a).call($b)}, TMP_2._s = self, TMP_2), $a).call($c);
})(Opal);
